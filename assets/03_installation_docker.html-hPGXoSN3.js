import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o as r,c as l,a as e,b as a,d as s,w as p,e as t}from"./app-aFM3-XTt.js";const d={},u=e("h1",{id:"docker",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker"},[e("span",null,"Docker")])],-1),m={href:"https://hub.docker.com/r/sguernion/rfxcom2mqtt/",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>This image support the following architectures: <code>amd64</code>, <code>arm/v7</code>.</p><h2 id="creating-the-initial-configuration" tabindex="-1"><a class="header-anchor" href="#creating-the-initial-configuration"><span>Creating the initial configuration</span></a></h2><p>Navigate to the directory where you will store the Rfxcom2MQTT data and execute the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://raw.githubusercontent.com/sguernion/rfxcom2mqtt/main/config/config.yaml <span class="token parameter variable">-P</span> data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),v=t(`<h2 id="running-the-container" tabindex="-1"><a class="header-anchor" href="#running-the-container"><span>Running the container</span></a></h2><p>Execute the following command, update the <code>--device</code> parameter to match the location of your adapter.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token punctuation">\\</span>
   <span class="token parameter variable">--name</span> rfxcom2mqtt <span class="token punctuation">\\</span>
   <span class="token parameter variable">--restart</span><span class="token operator">=</span>unless-stopped <span class="token punctuation">\\</span>
   <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/serial/by-id/usb-RFXCOM_RFXtrx433_A1XR56A5-if00-port0:/dev/ttyACM0 <span class="token punctuation">\\</span>
   <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/data:/app/data <span class="token punctuation">\\</span>
   <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Europe/Amsterdam <span class="token punctuation">\\</span>
   sguernion/rfxcom2mqtt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Parameters explanation:</strong></p><ul><li><code>--name rfxcom2mqtt</code>: Name of container</li><li><code>--restart=unless-stopped</code>: Automatically start on boot and restart after a crash</li><li><code>--device=/dev/serial/by-id/usb-RFXCOM_RFXtrx433_A1XR56A5-if00-port0:/dev/ttyACM0</code>: Location of adapter. The path before the <code>:</code> is the path on the host, the path after it is the path that is mapped to inside the container. You should always use the <code>/dev/serial/by-id/</code> path on the host.</li><li><code>-v $(pwd)/data:/app/data</code>: Directory where Rfxcom2MQTT stores it configuration (pwd maps to the current working directory)</li><li><code>-e TZ=Europe/Paris</code>: Configure the timezone</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you run the MQTT-Server on the same host (localhost) you could use the IP of the <code>docker0</code> bridge to establish the connection: <code>server: mqtt://172.17.0.1</code>.</p></div><h2 id="updating" tabindex="-1"><a class="header-anchor" href="#updating"><span>Updating</span></a></h2><p>To update to the latest Docker image:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull sguernion/rfxcom2mqtt:latest
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> rfxcom2mqtt
<span class="token comment"># Now run the container again with the instructions above</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tags" tabindex="-1"><a class="header-anchor" href="#tags"><span>Tags</span></a></h2><p>The following tags are available:</p><ul><li>Latest release version: <code>latest</code></li><li>Specific release version, e.g: <code>1.0.0</code></li></ul><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>Docker Compose</span></a></h2><p>Example of a Docker Compose file:</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">rfxcom2mqtt</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rfxcom2mqtt
    <span class="token key atrule">image</span><span class="token punctuation">:</span> sguernion/rfxcom2mqtt
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/app/data
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> TZ=Europe/Paris
    <span class="token key atrule">devices</span><span class="token punctuation">:</span>
      <span class="token comment"># Make sure this matched your adapter location</span>
      <span class="token punctuation">-</span> /dev/serial/by<span class="token punctuation">-</span>id/usb<span class="token punctuation">-</span>RFXCOM_RFXtrx433_A1XR56A5<span class="token punctuation">-</span>if00<span class="token punctuation">-</span>port0<span class="token punctuation">:</span>/dev/ttyACM0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also run a rootless container with Docker Compose by adding the required attributes to the <code>rfxcom2mqtt</code> service block in your <code>docker-compose.yml</code>:</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>    <span class="token key atrule">group_add</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> dialout
    <span class="token key atrule">user</span><span class="token punctuation">:</span> 1000<span class="token punctuation">:</span><span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="starting-the-container" tabindex="-1"><a class="header-anchor" href="#starting-the-container"><span>Starting the container</span></a></h3><p>To start the Docker container:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span> rfxcom2mqtt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can optionally skip <code>rfxcom2mqtt</code> and it will start all containers listed in the compose file.</p><h3 id="updating-1" tabindex="-1"><a class="header-anchor" href="#updating-1"><span>Updating</span></a></h3><p>To update to the latest Docker image:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> compose pull rfxcom2mqtt
<span class="token function">docker</span> compose up <span class="token parameter variable">-d</span> rfxcom2mqtt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can optionally skip <code>rfxcom2mqtt</code> and it will pull any new images for all containers in the compose file, and then restart those that were updated.</p>`,25);function k(b,g){const o=n("ExternalLinkIcon"),i=n("RouterLink");return r(),l("div",null,[u,e("p",null,[a("It is possible to run Rfxcom2MQTT in a Docker container using the "),e("a",m,[a("Rfxcom2MQTT Docker image"),s(o)]),a(".")]),h,e("p",null,[a("Now configure the MQTT server and adapter location as explained "),s(i,{to:"/installations/configuration/"},{default:p(()=>[a("here")]),_:1}),a(".")]),v])}const y=c(d,[["render",k],["__file","03_installation_docker.html.vue"]]);export{y as default};
